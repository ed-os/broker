# You may add multiple [[Gearman]] or [[Rabbitmq]] section. Each section will be one connection
# to the specified URL/Hostname.
[[Gearman]]
URL = "127.0.0.1:4730"
HostStatus = "statusngin_hoststatus"
HostCheck = "statusngin_hostchecks"
ServiceStatus = "statusngin_servicestatus"
ServiceCheck = "statusngin_servicechecks"
ServicePerfData = "statusngin_service_perfdata"
StateChange = "statusngin_statechanges"
AcknowledgementData = "statusngin_acknowledgements"
FlappingData = "statusngin_flappings"
DowntimeData = "statusngin_downtimes"
ContactNotificationMethodData = "statusngin_contactnotificationmethod"
RestartData = "statusngin_core_restart"
OCHP = "statusngin_ochp"
OCSP = "statusngin_ocsp"
# You can run external commands vis this queue.
WorkerCommand = "statusngin_cmd"

# To process OCHP/OCSP queues from, for example, a satellite, you could connect to that gearman/rabbitmq server
# This would mean that every host and service on the remote instance must be configured on the master too (as passive
# service)
#WorkerOCHP = "statusngin_ochp"
#WorkerOCSP = "statusngin_ocsp"

#SystemCommandData = "statusngin_systemcommands"
#CommentData = "statusngin_comments"
#ExternalCommandData = "statusngin_externalcommands"
#NotificationData = "statusngin_notifications"
#ProgramStatusData = "statusngin_programmstatus"
#ContactStatusData = "statusngin_contactstatus"
#ContactNotificationData = "statusngin_contactnotificationdata"
#EventHandlerData = "statusngin_eventhandler"
#ProcessData = "statusngin_processdata"
#LogData = "statusngin_logentries"

# You may specify multiple rabbitmq connections, by adding more [[Rabbitmq]] sections.
#[[Rabbitmq]]
#Hostname = "localhost"
#Username = "statusengine"
#Password = "statusengine"
##Vhost = "/"
##Timeout = 30
##Exchange = "statusengine"
##DurableExchange = false
##DurableQueues = false
##SSL = false
##SSL_verify = true
##SSL_cacert = ""
##SSL_cert = ""
##SSL_key = ""
#
#HostStatus = "statusngin_hoststatus"
#HostCheck = "statusngin_hostchecks"
#ServiceStatus = "statusngin_servicestatus"
#ServiceCheck = "statusngin_servicechecks"
#ServicePerfData = "statusngin_service_perfdata"
#StateChange = "statusngin_statechanges"
#AcknowledgementData = "statusngin_acknowledgements"
#FlappingData = "statusngin_flappings"
#DowntimeData = "statusngin_downtimes"
#ContactNotificationMethodData = "statusngin_contactnotificationmethod"
#RestartData = "statusngin_core_restart"
#OCHP = "statusngin_ochp"
#OCSP = "statusngin_ocsp"
#WorkerCommand = "statusngin_cmd"
##WorkerOCHP = "statusngin_ochp"
##WorkerOCSP = "statusngin_ocsp"
#
##SystemCommandData = "statusngin_systemcommands"
##CommentData = "statusngin_comments"
##ExternalCommandData = "statusngin_externalcommands"
##NotificationData = "statusngin_notifications"
##ProgramStatusData = "statusngin_programmstatus"
##ContactStatusData = "statusngin_contactstatus"
##ContactNotificationData = "statusngin_contactnotificationdata"
##EventHandlerData = "statusngin_eventhandler"
##ProcessData = "statusngin_processdata"
##LogData = "statusngin_logentries"

[Scheduler]
# Used to fix a nasty scheduler behaviour in naemon, needed when you often restart naemon
# If next_schedule of a service or host is in the past during startup, we reschedule
# the service/host within $StartupScheduleMax seconds.
StartupScheduleMax = 30

[Bulk]
#Maximum number of messages in one bulk message
#Maximum = 200
#Flush Bulk messages every X seconds dispite number of cached messages
#FlushInterval = 10
#List of queue identifier which should be created as bulk message
Queues = ["HostStatus", "HostCheck", "ServiceStatus", "ServiceCheck", "ServicePerfData", "StateChange", "OCHP", "OCSP", "LogData"]
